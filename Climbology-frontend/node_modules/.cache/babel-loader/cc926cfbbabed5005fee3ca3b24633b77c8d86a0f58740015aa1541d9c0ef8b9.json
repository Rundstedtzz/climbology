{"ast":null,"code":"var _jsxFileName = \"/Users/ricky/Desktop/Climbology-frontend/src/components/Create.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KilterBoard() {\n  _s();\n  const [selectedHolds, setSelectedHolds] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [newHold, setNewHold] = useState(null);\n  const navigate = useNavigate();\n  const [response, setResponse] = useState(null);\n  const handleClick = async e => {\n    const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n    const NUM_GRID_ROWS = 38; // Number of rows in the grid\n    const GRID_X_INCREMENT = 1; // Number of pixels between each column\n    const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n    const rect = e.target.getBoundingClientRect();\n    const originalHeight = e.target.naturalHeight;\n    const originalWidth = e.target.naturalWidth;\n    const clickX = e.clientX - rect.left; // X coordinate relative to the image\n    const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n    console.log(\"clickX: \", clickX);\n    console.log(\"clickY: \", clickY);\n    console.log(\"e.clientX: \", e.clientX);\n    console.log(\"e.clientY: \", e.clientY);\n    const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n    const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n\n    const x = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n    const y = NUM_GRID_ROWS - Math.ceil(clickY / cellHeight) - 1;\n    try {\n      // Update this URL to the correct endpoint\n      const url = 'http://localhost:8000/create/identify_hold/';\n      const response = await axios.post(url, {\n        x,\n        y\n      });\n      if (response.data.success) {\n        const holdX = response.data.x_coordinate;\n        const holdY = response.data.y_coordinate;\n\n        // Convert grid coordinates back to pixel coordinates\n        const pixelX = holdX * cellWidth + cellWidth / 2;\n        const pixelY = (NUM_GRID_ROWS - holdY - 1) * cellHeight + cellHeight / 2;\n        const newHold = {\n          id: response.data.holdId,\n          x_grid: response.data.x_coordinate,\n          y_grid: response.data.y_coordinate,\n          x_coor: e.clientX,\n          y_coor: e.clientY,\n          hold_type: response.data.type,\n          hold_function: response.data.function,\n          hold_depth: response.data.depth,\n          hold_orientation: response.data.orientation,\n          hold_size: response.data.size,\n          isSelected: true\n        };\n        setSelectedHolds(prevHolds => prevHolds.map(hold => ({\n          ...hold,\n          isSelected: false\n        })).concat(newHold));\n\n        // console.log('Hold identified:', response.data.holdId, response.data.x_coordinate, response.data.y_coordinate, pixelX, pixelY);\n        // console.log('Hold identified:', selectedHolds);\n        // pass to selectedHolds to backend\n      } else {\n        console.error('No hold identified:', response.data.message);\n      }\n    } catch (error) {\n      console.error('Error when identifying hold:', error);\n    }\n  };\n  useEffect(() => {\n    console.log('Updated Holds:', selectedHolds);\n  }, [selectedHolds]);\n  const updateHoldType = holdType => {\n    setSelectedHolds(prevHolds => prevHolds.map(hold => hold.isSelected ? {\n      ...hold,\n      hold_position_in_route: holdType,\n      isSelected: false\n    } : hold));\n  };\n  const getCircleColor = holdType => {\n    switch (holdType) {\n      case 'Start':\n        return 'green';\n      case 'Middle':\n        return 'blue';\n      case 'Finish':\n        return 'purple';\n      case 'Foot Only':\n        return 'orange';\n      default:\n        return 'red';\n    }\n  };\n  const renderCircles = () => {\n    return selectedHolds.map((hold, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"circle\",\n      style: {\n        top: hold.y_coor,\n        left: hold.x_coor,\n        borderColor: getCircleColor(hold.hold_position_in_route)\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this));\n  };\n  const handleSubmit = async () => {\n    try {\n      const response = await axios.post('http://localhost:8000/create/create_route/', {\n        holds: selectedHolds\n      });\n      console.log('Response:', response.data);\n      setResponse(response.data);\n      // Handle response or further actions here\n    } catch (error) {\n      console.error('Error sending holds to backend:', error);\n      // Handle error here\n    }\n  };\n  const handleChange = async () => {\n    // Navigate to the chatbot page with state\n    navigate(\"/routeops/\", {\n      state: {\n        holds: selectedHolds,\n        response: response\n      }\n    });\n  };\n\n  // Render the dropdown for the currently selected hold\n  const dropdownForSelectedHold = selectedHolds.find(hold => hold.isSelected);\n  const renderDropdown = () => {\n    return dropdownForSelectedHold && /*#__PURE__*/_jsxDEV(DropdownMenu, {\n      currentHold: dropdownForSelectedHold,\n      updateHoldType: updateHoldType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this);\n  };\n  const DropdownMenu = ({\n    currentHold,\n    updateHoldType\n  }) => {\n    const handleSelection = holdType => {\n      updateHoldType(holdType);\n      setShowDropdown(false); // Hide dropdown after selection\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-menu\",\n      style: {\n        top: currentHold.y_coor,\n        left: currentHold.x_coor + 50\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSelection('Start'),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSelection('Middle'),\n        children: \"Middle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSelection('Finish'),\n        children: \"Finish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSelection('Foot Only'),\n        children: \"Foot Only\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kilterBoardContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: kilter_board,\n      alt: \"Kilter Board\",\n      className: \"kilter-board\",\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), renderCircles(), renderDropdown(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"buttonx\",\n      children: \"Generate Beta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleChange,\n      className: \"buttonx\",\n      children: \"Route Operations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 9\n  }, this);\n}\n_s(KilterBoard, \"x8m947ozUXtUF5a7FCpn3Lvp3sw=\", false, function () {\n  return [useNavigate];\n});\n_c = KilterBoard;\nexport default KilterBoard;\nvar _c;\n$RefreshReg$(_c, \"KilterBoard\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","kilter_board","useNavigate","jsxDEV","_jsxDEV","KilterBoard","_s","selectedHolds","setSelectedHolds","showDropdown","setShowDropdown","newHold","setNewHold","navigate","response","setResponse","handleClick","e","NUM_GRID_COLUMNS","NUM_GRID_ROWS","GRID_X_INCREMENT","GRID_Y_INCREMENT","rect","target","getBoundingClientRect","originalHeight","naturalHeight","originalWidth","naturalWidth","clickX","clientX","left","clickY","clientY","top","console","log","cellWidth","width","cellHeight","height","x","Math","floor","y","ceil","url","post","data","success","holdX","x_coordinate","holdY","y_coordinate","pixelX","pixelY","id","holdId","x_grid","y_grid","x_coor","y_coor","hold_type","type","hold_function","function","hold_depth","depth","hold_orientation","orientation","hold_size","size","isSelected","prevHolds","map","hold","concat","error","message","updateHoldType","holdType","hold_position_in_route","getCircleColor","renderCircles","index","className","style","borderColor","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","holds","handleChange","state","dropdownForSelectedHold","find","renderDropdown","DropdownMenu","currentHold","handleSelection","children","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/ricky/Desktop/Climbology-frontend/src/components/Create.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction KilterBoard() {\n    const [selectedHolds, setSelectedHolds] = useState([]);\n    const [showDropdown, setShowDropdown] = useState(false);\n    const [newHold, setNewHold] = useState(null);\n    const navigate = useNavigate();\n    const [response, setResponse] = useState(null);\n    \n    const handleClick = async (e) => {\n        const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n        const NUM_GRID_ROWS = 38; // Number of rows in the grid\n        const GRID_X_INCREMENT = 1; // Number of pixels between each column\n        const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n        const rect = e.target.getBoundingClientRect();\n\n        const originalHeight = e.target.naturalHeight;\n        const originalWidth = e.target.naturalWidth;\n\n        const clickX = e.clientX - rect.left; // X coordinate relative to the image\n        const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n        console.log(\"clickX: \", clickX);\n        console.log(\"clickY: \", clickY);\n        console.log(\"e.clientX: \", e.clientX);\n        console.log(\"e.clientY: \", e.clientY);\n        const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n        const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n    \n        const x = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n        const y = NUM_GRID_ROWS - Math.ceil(clickY / cellHeight) -1;\n\n\n        try {\n            // Update this URL to the correct endpoint\n            const url = 'http://localhost:8000/create/identify_hold/';\n            \n            const response = await axios.post(url, { x, y });\n            \n            if (response.data.success) {\n                const holdX = response.data.x_coordinate;\n                const holdY = response.data.y_coordinate;\n\n                // Convert grid coordinates back to pixel coordinates\n                const pixelX = holdX * cellWidth + cellWidth / 2;\n                const pixelY = (NUM_GRID_ROWS - holdY - 1) * cellHeight + cellHeight / 2;\n\n                const newHold = {\n                    id: response.data.holdId,\n                    x_grid: response.data.x_coordinate,\n                    y_grid: response.data.y_coordinate,\n                    x_coor: e.clientX,\n                    y_coor: e.clientY,\n                    hold_type: response.data.type,\n                    hold_function: response.data.function,\n                    hold_depth: response.data.depth,\n                    hold_orientation: response.data.orientation,\n                    hold_size: response.data.size,\n                    isSelected: true,\n                };\n                setSelectedHolds(prevHolds => prevHolds.map(hold => ({ ...hold, isSelected: false })).concat(newHold));\n        \n                // console.log('Hold identified:', response.data.holdId, response.data.x_coordinate, response.data.y_coordinate, pixelX, pixelY);\n                // console.log('Hold identified:', selectedHolds);\n                // pass to selectedHolds to backend\n\n            } else {\n                console.error('No hold identified:', response.data.message);\n            }\n        } catch (error) {\n            console.error('Error when identifying hold:', error);\n        }\n    };\n\n\n\n    useEffect(() => {\n        console.log('Updated Holds:', selectedHolds);\n    }, [selectedHolds]);\n    \n    const updateHoldType = (holdType) => {\n        setSelectedHolds(prevHolds => \n            prevHolds.map(hold => \n                hold.isSelected ? { ...hold, hold_position_in_route: holdType, isSelected: false } : hold\n            )\n        );\n    };\n\n    const getCircleColor = (holdType) => {\n        switch (holdType) {\n            case 'Start': return 'green';\n            case 'Middle': return 'blue';\n            case 'Finish': return 'purple';\n            case 'Foot Only': return 'orange';\n            default: return 'red';\n        }\n    };\n\n    \n    const renderCircles = () => {\n        return selectedHolds.map((hold, index) => (\n            <div \n                key={index}\n                className=\"circle\"\n                style={{\n                    top: hold.y_coor,\n                    left: hold.x_coor,\n                    borderColor: getCircleColor(hold.hold_position_in_route),\n                }}\n            />\n        ));\n    };\n\n    const handleSubmit = async () => {\n        try {\n            const response = await axios.post('http://localhost:8000/create/create_route/', { holds: selectedHolds });\n            console.log('Response:', response.data);\n            setResponse(response.data);\n            // Handle response or further actions here\n        } catch (error) {\n            console.error('Error sending holds to backend:', error);\n            // Handle error here\n        }\n    };\n\n    const handleChange = async () => {\n      // Navigate to the chatbot page with state\n      navigate(\"/routeops/\", { state: { holds: selectedHolds, response: response} });\n    };\n    \n    // Render the dropdown for the currently selected hold\n    const dropdownForSelectedHold = selectedHolds.find(hold => hold.isSelected);\n    const renderDropdown = () => {\n        return dropdownForSelectedHold && (\n            <DropdownMenu currentHold={dropdownForSelectedHold} updateHoldType={updateHoldType} />\n        );\n    };\n\n\n    const DropdownMenu = ({ currentHold, updateHoldType }) => {\n        const handleSelection = (holdType) => {\n            updateHoldType(holdType);\n            setShowDropdown(false); // Hide dropdown after selection\n        };\n    \n        return (\n        \n            <div className=\"dropdown-menu\" style={{ top: currentHold.y_coor, left: currentHold.x_coor + 50 }}>\n                <button onClick={() => handleSelection('Start')}>Start</button>\n                <button onClick={() => handleSelection('Middle')}>Middle</button>\n                <button onClick={() => handleSelection('Finish')}>Finish</button>\n                <button onClick={() => handleSelection('Foot Only')}>Foot Only</button>\n                </div>\n\n        );\n    };\n\n    return (\n        <div className=\"kilterBoardContainer\">\n            <img src={kilter_board} alt=\"Kilter Board\" className=\"kilter-board\" onClick={handleClick} />\n            {renderCircles()}\n            {renderDropdown()}\n            <button onClick={handleSubmit} className = \"buttonx\">Generate Beta</button>\n            <button onClick={handleChange} className = \"buttonx\">Route Operations</button>\n        </div>\n    );\n    \n    \n    }\n\nexport default KilterBoard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,4BAA4B,CAAC,CAAC;AACvD,OAAO,cAAc,CAAC,CAAC;AACvB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMgB,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMmB,WAAW,GAAG,MAAOC,CAAC,IAAK;IAC7B,MAAMC,gBAAgB,GAAG,EAAE,CAAC,CAAC;IAC7B,MAAMC,aAAa,GAAG,EAAE,CAAC,CAAC;IAC1B,MAAMC,gBAAgB,GAAG,CAAC,CAAC,CAAC;IAC5B,MAAMC,gBAAgB,GAAG,CAAC,CAAC,CAAC;IAC5B,MAAMC,IAAI,GAAGL,CAAC,CAACM,MAAM,CAACC,qBAAqB,CAAC,CAAC;IAE7C,MAAMC,cAAc,GAAGR,CAAC,CAACM,MAAM,CAACG,aAAa;IAC7C,MAAMC,aAAa,GAAGV,CAAC,CAACM,MAAM,CAACK,YAAY;IAE3C,MAAMC,MAAM,GAAGZ,CAAC,CAACa,OAAO,GAAGR,IAAI,CAACS,IAAI,CAAC,CAAC;IACtC,MAAMC,MAAM,GAAGf,CAAC,CAACgB,OAAO,GAAGX,IAAI,CAACY,GAAG,CAAC,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEP,MAAM,CAAC;IAC/BM,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEJ,MAAM,CAAC;IAC/BG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEnB,CAAC,CAACa,OAAO,CAAC;IACrCK,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEnB,CAAC,CAACgB,OAAO,CAAC;IACrC,MAAMI,SAAS,GAAGf,IAAI,CAACgB,KAAK,GAAGpB,gBAAgB,CAAC,CAAC;IACjD,MAAMqB,UAAU,GAAGjB,IAAI,CAACkB,MAAM,GAAGrB,aAAa,CAAC,CAAC;;IAEhD,MAAMsB,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACd,MAAM,GAAGQ,SAAS,CAAC,GAAGjB,gBAAgB;IAC3D,MAAMwB,CAAC,GAAGzB,aAAa,GAAGuB,IAAI,CAACG,IAAI,CAACb,MAAM,GAAGO,UAAU,CAAC,GAAE,CAAC;IAG3D,IAAI;MACA;MACA,MAAMO,GAAG,GAAG,6CAA6C;MAEzD,MAAMhC,QAAQ,GAAG,MAAMd,KAAK,CAAC+C,IAAI,CAACD,GAAG,EAAE;QAAEL,CAAC;QAAEG;MAAE,CAAC,CAAC;MAEhD,IAAI9B,QAAQ,CAACkC,IAAI,CAACC,OAAO,EAAE;QACvB,MAAMC,KAAK,GAAGpC,QAAQ,CAACkC,IAAI,CAACG,YAAY;QACxC,MAAMC,KAAK,GAAGtC,QAAQ,CAACkC,IAAI,CAACK,YAAY;;QAExC;QACA,MAAMC,MAAM,GAAGJ,KAAK,GAAGb,SAAS,GAAGA,SAAS,GAAG,CAAC;QAChD,MAAMkB,MAAM,GAAG,CAACpC,aAAa,GAAGiC,KAAK,GAAG,CAAC,IAAIb,UAAU,GAAGA,UAAU,GAAG,CAAC;QAExE,MAAM5B,OAAO,GAAG;UACZ6C,EAAE,EAAE1C,QAAQ,CAACkC,IAAI,CAACS,MAAM;UACxBC,MAAM,EAAE5C,QAAQ,CAACkC,IAAI,CAACG,YAAY;UAClCQ,MAAM,EAAE7C,QAAQ,CAACkC,IAAI,CAACK,YAAY;UAClCO,MAAM,EAAE3C,CAAC,CAACa,OAAO;UACjB+B,MAAM,EAAE5C,CAAC,CAACgB,OAAO;UACjB6B,SAAS,EAAEhD,QAAQ,CAACkC,IAAI,CAACe,IAAI;UAC7BC,aAAa,EAAElD,QAAQ,CAACkC,IAAI,CAACiB,QAAQ;UACrCC,UAAU,EAAEpD,QAAQ,CAACkC,IAAI,CAACmB,KAAK;UAC/BC,gBAAgB,EAAEtD,QAAQ,CAACkC,IAAI,CAACqB,WAAW;UAC3CC,SAAS,EAAExD,QAAQ,CAACkC,IAAI,CAACuB,IAAI;UAC7BC,UAAU,EAAE;QAChB,CAAC;QACDhE,gBAAgB,CAACiE,SAAS,IAAIA,SAAS,CAACC,GAAG,CAACC,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,UAAU,EAAE;QAAM,CAAC,CAAC,CAAC,CAACI,MAAM,CAACjE,OAAO,CAAC,CAAC;;QAEtG;QACA;QACA;MAEJ,CAAC,MAAM;QACHwB,OAAO,CAAC0C,KAAK,CAAC,qBAAqB,EAAE/D,QAAQ,CAACkC,IAAI,CAAC8B,OAAO,CAAC;MAC/D;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZ1C,OAAO,CAAC0C,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD;EACJ,CAAC;EAID9E,SAAS,CAAC,MAAM;IACZoC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE7B,aAAa,CAAC;EAChD,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,MAAMwE,cAAc,GAAIC,QAAQ,IAAK;IACjCxE,gBAAgB,CAACiE,SAAS,IACtBA,SAAS,CAACC,GAAG,CAACC,IAAI,IACdA,IAAI,CAACH,UAAU,GAAG;MAAE,GAAGG,IAAI;MAAEM,sBAAsB,EAAED,QAAQ;MAAER,UAAU,EAAE;IAAM,CAAC,GAAGG,IACzF,CACJ,CAAC;EACL,CAAC;EAED,MAAMO,cAAc,GAAIF,QAAQ,IAAK;IACjC,QAAQA,QAAQ;MACZ,KAAK,OAAO;QAAE,OAAO,OAAO;MAC5B,KAAK,QAAQ;QAAE,OAAO,MAAM;MAC5B,KAAK,QAAQ;QAAE,OAAO,QAAQ;MAC9B,KAAK,WAAW;QAAE,OAAO,QAAQ;MACjC;QAAS,OAAO,KAAK;IACzB;EACJ,CAAC;EAGD,MAAMG,aAAa,GAAGA,CAAA,KAAM;IACxB,OAAO5E,aAAa,CAACmE,GAAG,CAAC,CAACC,IAAI,EAAES,KAAK,kBACjChF,OAAA;MAEIiF,SAAS,EAAC,QAAQ;MAClBC,KAAK,EAAE;QACHpD,GAAG,EAAEyC,IAAI,CAACd,MAAM;QAChB9B,IAAI,EAAE4C,IAAI,CAACf,MAAM;QACjB2B,WAAW,EAAEL,cAAc,CAACP,IAAI,CAACM,sBAAsB;MAC3D;IAAE,GANGG,KAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOb,CACJ,CAAC;EACN,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAM9E,QAAQ,GAAG,MAAMd,KAAK,CAAC+C,IAAI,CAAC,4CAA4C,EAAE;QAAE8C,KAAK,EAAEtF;MAAc,CAAC,CAAC;MACzG4B,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEtB,QAAQ,CAACkC,IAAI,CAAC;MACvCjC,WAAW,CAACD,QAAQ,CAACkC,IAAI,CAAC;MAC1B;IACJ,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACZ1C,OAAO,CAAC0C,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD;IACJ;EACJ,CAAC;EAED,MAAMiB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B;IACAjF,QAAQ,CAAC,YAAY,EAAE;MAAEkF,KAAK,EAAE;QAAEF,KAAK,EAAEtF,aAAa;QAAEO,QAAQ,EAAEA;MAAQ;IAAE,CAAC,CAAC;EAChF,CAAC;;EAED;EACA,MAAMkF,uBAAuB,GAAGzF,aAAa,CAAC0F,IAAI,CAACtB,IAAI,IAAIA,IAAI,CAACH,UAAU,CAAC;EAC3E,MAAM0B,cAAc,GAAGA,CAAA,KAAM;IACzB,OAAOF,uBAAuB,iBAC1B5F,OAAA,CAAC+F,YAAY;MAACC,WAAW,EAAEJ,uBAAwB;MAACjB,cAAc,EAAEA;IAAe;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACxF;EACL,CAAC;EAGD,MAAMQ,YAAY,GAAGA,CAAC;IAAEC,WAAW;IAAErB;EAAe,CAAC,KAAK;IACtD,MAAMsB,eAAe,GAAIrB,QAAQ,IAAK;MAClCD,cAAc,CAACC,QAAQ,CAAC;MACxBtE,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5B,CAAC;IAED,oBAEIN,OAAA;MAAKiF,SAAS,EAAC,eAAe;MAACC,KAAK,EAAE;QAAEpD,GAAG,EAAEkE,WAAW,CAACvC,MAAM;QAAE9B,IAAI,EAAEqE,WAAW,CAACxC,MAAM,GAAG;MAAG,CAAE;MAAA0C,QAAA,gBAC7FlG,OAAA;QAAQmG,OAAO,EAAEA,CAAA,KAAMF,eAAe,CAAC,OAAO,CAAE;QAAAC,QAAA,EAAC;MAAK;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/DvF,OAAA;QAAQmG,OAAO,EAAEA,CAAA,KAAMF,eAAe,CAAC,QAAQ,CAAE;QAAAC,QAAA,EAAC;MAAM;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjEvF,OAAA;QAAQmG,OAAO,EAAEA,CAAA,KAAMF,eAAe,CAAC,QAAQ,CAAE;QAAAC,QAAA,EAAC;MAAM;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACjEvF,OAAA;QAAQmG,OAAO,EAAEA,CAAA,KAAMF,eAAe,CAAC,WAAW,CAAE;QAAAC,QAAA,EAAC;MAAS;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC;EAGlB,CAAC;EAED,oBACIvF,OAAA;IAAKiF,SAAS,EAAC,sBAAsB;IAAAiB,QAAA,gBACjClG,OAAA;MAAKoG,GAAG,EAAEvG,YAAa;MAACwG,GAAG,EAAC,cAAc;MAACpB,SAAS,EAAC,cAAc;MAACkB,OAAO,EAAEvF;IAAY;MAAAwE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3FR,aAAa,CAAC,CAAC,EACfe,cAAc,CAAC,CAAC,eACjB9F,OAAA;MAAQmG,OAAO,EAAEX,YAAa;MAACP,SAAS,EAAG,SAAS;MAAAiB,QAAA,EAAC;IAAa;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3EvF,OAAA;MAAQmG,OAAO,EAAET,YAAa;MAACT,SAAS,EAAG,SAAS;MAAAiB,QAAA,EAAC;IAAgB;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7E,CAAC;AAIV;AAACrF,EAAA,CArKID,WAAW;EAAA,QAICH,WAAW;AAAA;AAAAwG,EAAA,GAJvBrG,WAAW;AAuKpB,eAAeA,WAAW;AAAC,IAAAqG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}